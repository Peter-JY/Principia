
#pragma once

#include <array>

#include "numerics/quadrature.hpp"

namespace principia {
namespace numerics {
namespace quadrature {
namespace internal_quadrature {

using quantities::Difference;

template<int points, typename Argument, typename Function>
Primitive<std::invoke_result_t<Function, Argument>, Argument> Gauss(
    Function const& function,
    Argument const& lower_bound,
    Argument const& upper_bound,
    std::array<double, points> nodes,
    std::array<double, points> weights) {
  Difference<Argument> half_width = (upper_bound - lower_bound) / 2;
  std::invoke_result_t<Function, Argument> result{};
  for (int i = 0; i < points; ++i) {
    Argument const scaled_node = lower_bound + half_width * (nodes[i] + 1);
    // TODO(phl): Consider compensated summation.
    result += weights[i] * function(scaled_node);
  }
  return result * half_width;
}

template<int points, typename Argument, typename Function>
Primitive<std::invoke_result_t<Function, Argument>, Argument> GaussLegendre(
    Function const& function,
    Argument const& lower_bound,
    Argument const& upper_bound) {
  // https://dlmf.nist.gov/3.5.
  if constexpr (points <= 5) {
    return Gauss<5>(function,
                 lower_bound,
                 upper_bound,
                 {-0.90617984593866399279762687829939296512565191076253,
                  -0.53846931010568309103631442070020880496728660690556,
                  0,
                  0.53846931010568309103631442070020880496728660690556,
                  0.90617984593866399279762687829939296512565191076253},
                 {0.23692688505618908751426404071991736264326000221241,
                  0.47862867049936646804129151483563819291229555334314,
                  0.56888888888888888888888888888888888888888888888889,
                  0.47862867049936646804129151483563819291229555334314,
                  0.23692688505618908751426404071991736264326000221241});
  } else if constexpr (points <= 10) {
    return Gauss<10>(function,
                 lower_bound,
                 upper_bound,
                 {-0.97390652851717172007796401208445205342826994669238,
                  -0.86506336668898451073209668842349304852754301496533,
                  -0.67940956829902440623432736511487357576929471183481,
                  -0.43339539412924719079926594316578416220007183765625,
                  -0.14887433898163121088482600112971998461756485942069,
                  0.14887433898163121088482600112971998461756485942069,
                  0.43339539412924719079926594316578416220007183765625,
                  0.67940956829902440623432736511487357576929471183481,
                  0.86506336668898451073209668842349304852754301496533,
                  0.97390652851717172007796401208445205342826994669238},
                 {0.066671344308688137593568809893331792857864834320158,
                  0.14945134915058059314577633965769733240255663966943,
                  0.21908636251598204399553493422816319245877187052268,
                  0.26926671930999635509122692156946935285975993846088,
                  0.29552422471475287017389299465133832942104671702685,
                  0.29552422471475287017389299465133832942104671702685,
                  0.26926671930999635509122692156946935285975993846088,
                  0.21908636251598204399553493422816319245877187052268,
                  0.14945134915058059314577633965769733240255663966943,
                  0.066671344308688137593568809893331792857864834320158});
  } else if constexpr (points <= 20) {
    return Gauss<20>(function,
                 lower_bound,
                 upper_bound,
                 {-0.99312859918509492478612238847132027822264713090166,
                  -0.96397192727791379126766613119727722191206032780619,
                  -0.91223442825132590586775244120329811304918479742369,
                  -0.83911697182221882339452906170152068532962936506564,
                  -0.74633190646015079261430507035564159031073067956918,
                  -0.63605368072651502545283669622628593674338911679937,
                  -0.51086700195082709800436405095525099842549132920243,
                  -0.37370608871541956067254817702492723739574632170568,
                  -0.22778585114164507808049619536857462474308893768293,
                  -0.076526521133497333754640409398838211004796266813498,
                  0.076526521133497333754640409398838211004796266813498,
                  0.22778585114164507808049619536857462474308893768293,
                  0.37370608871541956067254817702492723739574632170568,
                  0.51086700195082709800436405095525099842549132920243,
                  0.63605368072651502545283669622628593674338911679937,
                  0.74633190646015079261430507035564159031073067956918,
                  0.83911697182221882339452906170152068532962936506564,
                  0.91223442825132590586775244120329811304918479742369,
                  0.96397192727791379126766613119727722191206032780619,
                  0.99312859918509492478612238847132027822264713090166},
                 {0.017614007139152118311861962351852816362143105543337,
                  0.040601429800386941331039952274932109879090639989952,
                  0.062672048334109063569506535187041606351601076578436,
                  0.083276741576704748724758143222046206100177828583163,
                  0.10193011981724043503675013548034987616669165602339,
                  0.11819453196151841731237737771138228700504121954897,
                  0.13168863844917662689849449974816313491611051114698,
                  0.14209610931838205132929832506716493303451541339202,
                  0.14917298647260374678782873700196943669267990408137,
                  0.15275338713072585069808433195509759349194864511238,
                  0.15275338713072585069808433195509759349194864511238,
                  0.14917298647260374678782873700196943669267990408137,
                  0.14209610931838205132929832506716493303451541339202,
                  0.13168863844917662689849449974816313491611051114698,
                  0.11819453196151841731237737771138228700504121954897,
                  0.10193011981724043503675013548034987616669165602339,
                  0.083276741576704748724758143222046206100177828583163,
                  0.062672048334109063569506535187041606351601076578436,
                  0.040601429800386941331039952274932109879090639989952,
                  0.017614007139152118311861962351852816362143105543337});
  } else {
    static_assert(points <= 20);
  }
}

template<typename Argument, typename Function>
Primitive<std::invoke_result_t<Function, Argument>, Argument> Midpoint(
    Function const& function,
    Argument const& lower_bound,
    Argument const& upper_bound,
    int const intervals) {
  Difference<Argument> const h = (upper_bound - lower_bound) / intervals;
  Primitive<std::invoke_result_t<Function, Argument>, Argument> result{};
  for (int i = 0; i < intervals; ++i) {
    result += function(lower_bound + (i + 0.5) * h) * h;
  }
  return result;
}

}  // namespace internal_quadrature
}  // namespace quadrature
}  // namespace numerics
}  // namespace principia
